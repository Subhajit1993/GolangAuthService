name: "Go Code Quality & Security Analysis"

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]
  schedule:
    - cron: '29 14 * * 4'  # Weekly on Thursdays

jobs:
  # CodeQL Security Analysis for Go
  codeql-analyze:
    name: CodeQL Security Analysis (Go)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for better analysis

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          build-mode: autobuild
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  # Golang Specific Analysis
  go-analysis:
    name: Go Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Linting with golangci-lint
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=5m --out-format=github-actions

      # Go built-in tools
      - name: Go Vet
        run: |
          go vet ./...

      - name: Go Fmt
        run: |
          test -z $(gofmt -l .) || (gofmt -d . && exit 1)

      # Test coverage
      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.txt




  # Report Generation
  report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [ codeql-analyze, go-analysis ]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create report directory
        run: mkdir -p reports

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Generate Summary Report
        run: |
          echo "# Go Code Quality & Security Analysis Report" > reports/go-analysis-summary.md
          echo "## Generated on: ${{ steps.timestamp.outputs.timestamp }}" >> reports/go-analysis-summary.md
          echo "## Repository: ${{ github.repository }}" >> reports/go-analysis-summary.md
          echo "## Branch: ${{ github.ref }}" >> reports/go-analysis-summary.md
          echo "## Commit: ${{ github.sha }}" >> reports/go-analysis-summary.md
          
          echo "## Job Status" >> reports/go-analysis-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analyze.result }}" >> reports/go-analysis-summary.md
          echo "- Go Code Quality: ${{ needs.go-analysis.result }}" >> reports/go-analysis-summary.md
          
          echo "## Recommendations" >> reports/go-analysis-summary.md
          echo "- Review any failed jobs and address identified issues" >> reports/go-analysis-summary.md
          echo "- Check coverage reports to ensure adequate test coverage" >> reports/go-analysis-summary.md
          echo "- Review dependency vulnerabilities detected by Nancy" >> reports/go-analysis-summary.md
          echo "- Address security concerns identified by Gosec and CodeQL" >> reports/go-analysis-summary.md

      - name: Archive reports
        uses: actions/upload-artifact@v4
        with:
          name: go-analysis-reports
          path: reports/