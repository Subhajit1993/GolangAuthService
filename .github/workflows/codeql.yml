name: "Go Code Quality & Security Analysis with CodeQL and GolangCI-Lint"

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
    types: [ opened, edited, reopened ]
  schedule:
    - cron: '29 14 * * 4'  # Weekly on Thursdays

jobs:
  # CodeQL Security Analysis for Go
  codeql-analyze:
    name: CodeQL Security Analysis (Go)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for better analysis

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          build-mode: autobuild
          config-file: ./.github/codeql/codeql-config.yml
          debug: true  # Enable debug output

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  # GolangCI-Lint Analysis
  golangci-lint:
    name: GolangCI-Lint Analysis
    runs-on: ubuntu-latest
    needs: [ codeql-analyze ]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: GolangCI-Lint
        id: lint
        run: |
          golangci-lint run --config ./.github/golangci.yml --out-format json > lint-report.json

      - name: Comment on PR with linting errors
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lintReport = require('fs').readFileSync('lint-report.json', 'utf8');
            const lintErrors = JSON.parse(lintReport);
            const errors = lintErrors.linters.golangci-lint.issues.filter(issue => issue.severity === 'error');
            if (errors.length > 0) {
              const errorMessages = errors.map(error => `**${error.message}** at ${error.from} line ${error.line}`);
              const commentBody = `### Linting Errors Found\n\nThe following errors were identified by GolangCI-Lint:\n\n${errorMessages.join('\n')}`;
              github.issues.createComment({
                issue_number: github.context.pullRequest.number,
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                body: commentBody
              });
            }
