name: "Go Code Quality Analysis"

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    - cron: '29 14 * * 4'  # Weekly on Thursdays

jobs:
  # Use reviewdog directly to avoid golangci-lint config issues
  reviewdog:
    name: Lint with Reviewdog
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      # Create a minimal golangci config just for the function params rule
      - name: Create golangci-lint config
        run: |
          cat > .golangci.yml << 'EOL'
          linters:
            enable:
              - revive
          
          linters-settings:
            revive:
              rules:
                - name: argument-limit
                  severity: error
                  arguments: [3]
          EOL

      - name: Run reviewdog
        uses: reviewdog/action-golangci-lint@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # For PR comments
          reporter: github-pr-review
          # Fail on error to show in GitHub checks
          fail-on-error: true
          # Skip config file - use default settings
          go_version: "1.21"
          golangci-lint-flags: "--config=.golangci.yml"

  # CodeQL Security Analysis for Go
  codeql-analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

  # Report Generation
  report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [ codeql-analyze, reviewdog ]
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Generate Summary Report
        run: |
          echo "# Go Code Quality & Security Analysis Report" > report.md
          echo "## Generated on: ${{ steps.timestamp.outputs.timestamp }}" >> report.md
          echo "## Repository: ${{ github.repository }}" >> report.md
          echo "## Branch: ${{ github.ref }}" >> report.md
          echo "## Commit: ${{ github.sha }}" >> report.md
          
          echo "## Job Status" >> report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analyze.result }}" >> report.md
          echo "- Linting Analysis: ${{ needs.reviewdog.result }}" >> report.md
          
          echo "## Function Parameter Limit" >> report.md
          echo "- Functions with more than 3 parameters will be flagged" >> report.md
          echo "- Consider using structs to group related parameters" >> report.md
          
          echo "## Linting Comments" >> report.md
          echo "- Check the 'Files changed' tab to see detailed linting comments" >> report.md
          
          echo "## Recommendations" >> report.md
          echo "- Review any failed jobs and address identified issues" >> report.md
          echo "- Address security concerns identified by CodeQL" >> report.md
          echo "- Refactor functions with more than 3 parameters to improve code maintainability" >> report.md

      # Add summary as PR comment
      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: go-quality-report
          path: report.md